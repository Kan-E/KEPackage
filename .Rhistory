theme(axis.line.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_blank(),
axis.title.y=element_blank(),
panel.background=element_rect(fill="white"),
panel.grid=element_blank())
data.z <- genescale(data, axis=1, method="Z")
data.z <- na.omit(data.z)
ht <- draw(as.grob(Heatmap(data.z, name = "z-score",
column_order = sort(colnames(data.z[1:9])),
clustering_method_columns = 'ward.D2',
show_row_names = F, show_row_dend = F)))
pdf("a.pdf")
plot_grid(g3,g1,g2, ht, labels=LETTERS[1:4])
dev.off()
pdf(pca_name, height = 3, width = 3.5)
print(g1)
dev.off()
pdf(mds_name, height = 3, width = 3.5)
print(g2)
dev.off()
pdf("dendrogram_wardD2.pdf",height = 3,width = 3)
print(g3)
dev.off()
}
overview <- function(Count_matrix){
data <- read.csv(Count_matrix, header = T, row.names = 1)
pca <- prcomp(data, scale. = T)
label<- colnames(data)
label<- gsub("\\_.+$", "", label)
lab_x <- paste(summary(pca)$importance[3,1],
"% of variance)", sep = "")
lab_x <- paste("PC1 (", lab_x, sep = "")
lab_y <- paste(summary(pca)$importance[3,2],
"% of variance)", sep = "")
lab_y <- paste("PC2 (", lab_y, sep = "")
pca$rotation <- as.data.frame(pca$rotation)
g1 <- ggplot(pca$rotation,
aes(x=pca$rotation[,1],
y=pca$rotation[,2],
col=label, label = label)) +
geom_point()+
theme(panel.background =element_rect(fill=NA,color=NA),
panel.border = element_rect(fill = NA, size=0.5)) +
xlab(lab_x) + ylab(lab_y) + geom_text_repel() +
theme(legend.position="none")
rho <- cor(data,method="spearman")
d <- dist(1-rho)
mds <- as.data.frame(cmdscale(d))
label<-colnames(data)
label<-gsub("\\_.+$", "", label)
g2 <- ggplot(mds, aes(x = mds[,1], y = mds[,2],
col = label, label = label)) +
geom_point()+
theme(panel.background =element_rect(fill=NA,color=NA),
panel.border = element_rect(fill = NA, size=0.5)) +
xlab("Leading LogFC (dim 1)") + ylab("Leading LogFC (dim 2)") +
geom_text_repel() + theme(legend.position="none")
data.t <- t(data)
hc <- hclust(dist(data.t), "ward.D2")
dendr <- dendro_data(hc, type="rectangle")
g3 <- ggplot() +
geom_segment(data=segment(dendr),
aes(x=x, y=y, xend=xend, yend=yend)) +
geom_text(data=label(dendr),
aes(x, y, label=label, hjust=0), size=3) +
coord_flip()+ scale_y_reverse(expand=c(0.2, 0)) +
theme(axis.line.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_blank(),
axis.title.y=element_blank(),
panel.background=element_rect(fill="white"),
panel.grid=element_blank())
data.z <- genescale(data, axis=1, method="Z")
data.z <- na.omit(data.z)
ht <- draw(as.grob(Heatmap(data.z, name = "z-score",
column_order = sort(colnames(data.z[1:9])),
clustering_method_columns = 'ward.D2',
show_row_names = F, show_row_dend = F)))
pdf("a.pdf")
plot_grid(g3,g1,g2, ht, labels=LETTERS[1:4])
dev.off()
pca_name <- gsub("\\..+$", "", Count_matrix)
pca_name <- paste(pca_name, "_pca.pdf", sep = "")
mds_name <- gsub("\\..+$", "", Count_matrix)
mds_name <- paste(mds_name, "_mds.pdf", sep = "")
pdf(pca_name, height = 3, width = 3.5)
print(g1)
dev.off()
pdf(mds_name, height = 3, width = 3.5)
print(g2)
dev.off()
pdf("dendrogram_wardD2.pdf",height = 3,width = 3)
print(g3)
dev.off()
}
overview(Count_matrix = "PQS_ALL.csv")
ht <- draw(ht)
library(gTree)
overview <- function(Count_matrix){
data <- read.csv(Count_matrix, header = T, row.names = 1)
pca <- prcomp(data, scale. = T)
label<- colnames(data)
label<- gsub("\\_.+$", "", label)
lab_x <- paste(summary(pca)$importance[3,1],
"% of variance)", sep = "")
lab_x <- paste("PC1 (", lab_x, sep = "")
lab_y <- paste(summary(pca)$importance[3,2],
"% of variance)", sep = "")
lab_y <- paste("PC2 (", lab_y, sep = "")
pca$rotation <- as.data.frame(pca$rotation)
g1 <- ggplot(pca$rotation,
aes(x=pca$rotation[,1],
y=pca$rotation[,2],
col=label, label = label)) +
geom_point()+
theme(panel.background =element_rect(fill=NA,color=NA),
panel.border = element_rect(fill = NA, size=0.5)) +
xlab(lab_x) + ylab(lab_y) + geom_text_repel() +
theme(legend.position="none")
rho <- cor(data,method="spearman")
d <- dist(1-rho)
mds <- as.data.frame(cmdscale(d))
label<-colnames(data)
label<-gsub("\\_.+$", "", label)
g2 <- ggplot(mds, aes(x = mds[,1], y = mds[,2],
col = label, label = label)) +
geom_point()+
theme(panel.background =element_rect(fill=NA,color=NA),
panel.border = element_rect(fill = NA, size=0.5)) +
xlab("Leading LogFC (dim 1)") + ylab("Leading LogFC (dim 2)") +
geom_text_repel() + theme(legend.position="none")
data.t <- t(data)
hc <- hclust(dist(data.t), "ward.D2")
dendr <- dendro_data(hc, type="rectangle")
g3 <- ggplot() +
geom_segment(data=segment(dendr),
aes(x=x, y=y, xend=xend, yend=yend)) +
geom_text(data=label(dendr),
aes(x, y, label=label, hjust=0), size=3) +
coord_flip()+ scale_y_reverse(expand=c(0.2, 0)) +
theme(axis.line.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_blank(),
axis.title.y=element_blank(),
panel.background=element_rect(fill="white"),
panel.grid=element_blank())
data.z <- genescale(data, axis=1, method="Z")
data.z <- na.omit(data.z)
ht <- as.grob(Heatmap(data.z, name = "z-score",
column_order = sort(colnames(data.z[1:9])),
clustering_method_columns = 'ward.D2',
show_row_names = F, show_row_dend = F))
pdf("a.pdf")
plot_grid(g3,g1,g2, ht, labels=LETTERS[1:4])
dev.off()
pca_name <- gsub("\\..+$", "", Count_matrix)
pca_name <- paste(pca_name, "_pca.pdf", sep = "")
mds_name <- gsub("\\..+$", "", Count_matrix)
mds_name <- paste(mds_name, "_mds.pdf", sep = "")
pdf(pca_name, height = 3, width = 3.5)
print(g1)
dev.off()
pdf(mds_name, height = 3, width = 3.5)
print(g2)
dev.off()
pdf("dendrogram_wardD2.pdf",height = 3,width = 3)
print(g3)
dev.off()
}
overview(Count_matrix = "PQS_ALL.csv")
library(EBSeq)
BiocManager::install("EBSeq")
setwd("~/Desktop/Automator/Boxplot_batch")
library(ggpubr)
library(ggplot2)
library(rstatix)
library(gdata)
library(dplyr)
library(tidyverse)
dir.create("boxplot_with_asterisk",showWarnings = F)
dir.create("test",showWarnings = F)
dir.create("boxplot",showWarnings = F)
files <- list.files(pattern = "*.csv")
files <- gsub("\\..+$", "", files)
for (name in files) {
data.file <- paste(name, '.csv', sep = '')
print(data.file)
data <- read.csv (data.file,header = T)
data<-data %>% tidyr::gather(key=sample, value=value,-Row.names)
data$sample<-gsub("\\_.+$", "", data$sample)
data$Row.names <- as.factor(data$Row.names)
data$sample <- as.factor(data$sample)
data$value <- as.numeric(data$value)
stat.test <- data %>%
group_by(Row.names) %>%
tukey_hsd(value ~ sample) %>%
add_significance("p.adj")
stat.test <- stat.test %>% add_xy_position()
stat.test
image.file <- paste(name, '.pdf', sep = '')
image.file <- paste('boxplot_with_asterisk/', image.file, sep = '')
pdf(image.file)
plot(ggboxplot(data,x = "sample", y = "value",fill = "sample",
facet.by = "Row.names",scales = "free", add = "jitter")+ stat_pvalue_manual(stat.test,hide.ns = T,tip.length = 0.01)+theme(axis.text.x= element_text(size = 5),axis.text.y= element_text(size = 10)))
dev.off()
image.file2 <- paste(name, '.pdf', sep = '')
image.file2 <- paste('boxplot/', image.file2, sep = '')
pdf(image.file2)
plot(ggboxplot(data,x = "sample", y = "value",fill = "sample",
facet.by = "Row.names",scales = "free", add = "jitter")+theme(axis.text.x= element_text(size = 5),axis.text.y= element_text(size = 10))+scale_y_continuous(limits = c(0, NA)))
dev.off()
test.file <- paste(name, '_tukeyHSD.csv', sep = '')
test.file <- paste('test/', test.file, sep = '')
write_csv(stat.test[,1:10], file = test.file)
dev.off()
}
source('~/Desktop/R_source/Boxplot_batch.R')
setwd("~/Desktop/Automator/Boxplot_batch")
source('~/Desktop/R_source/Boxplot_batch.R')
source('~/Desktop/R_source/Boxplot_batch.R')
setwd("~/Desktop/Automator/Boxplot_batch")
source('~/Desktop/R_source/Boxplot_batch.R')
source('~/Desktop/Automator/Boxplot_batch/Boxplot_batch.R')
library(EBSeq)
head(data("GeneMat"))
data("GeneMat")
str(GeneMat)
Conditions=as.factor(rep(c("C1","C2"),each=5))
Conditions
EBOut=EBTest(Data=GeneMat,Conditions=as.factor(rep(c("C1","C2"),each=5)),sizeFactors=Sizes, maxround=5)
Sizes=MedianNorm(GeneMat)
EBOut=EBTest(Data=GeneMat,Conditions=as.factor(rep(c("C1","C2"),each=5)),sizeFactors=Sizes, maxround=5)
EBDERes=GetDEResults(EBOut, FDR=0.05)
str(EBDERes$DEfound)
head(EBDERes$PPMat)
str(data)
setwd("~/Desktop/test/Count_matrix")
data <-read.csv("PQS_ALL.csv",header = T,row.names = )
data <-read.csv("PQS_ALL.csv",header = T,row.names = 1)
str(data)
View(GeneMat)
Sizes=MedianNorm(data)
EBOut=EBTest(Data=data,Conditions=as.factor(rep(c("C1","C2"),each=5)),sizeFactors=Sizes, maxround=5)
colnames(data) <- c("Pro","Pro","Pro","Qui","Qui","Qui","Sen","Sen","Sen")
Conditions=as.factor(rep(c("Pro","Qui"),each=3))
EBOut=EBTest(Data=data[,1:6],Conditions=as.factor(rep(c("Pro","Qui"),each=3)),sizeFactors=Sizes, maxround=3)
data2<-as.data.frame(data)
View(data)
data2 <- matrix(data)
View(data2)
head(data2)
data2 <- matrix(data,ncol = 9)
data2 <- matrix(data,ncol = 9,byrow = T)
View(GeneMat)
x <- matrix(1:12,3)
str(x)
data <-read.csv("PQS_ALL.csv")
colnames(data) <- c("Pro","Pro","Pro","Qui","Qui","Qui","Sen","Sen","Sen")
str(data)
data <-read.csv("PQS_ALL.csv",header = T,row.names = 1)
EBOut=EBTest(Data=data[,1:6],Conditions=as.factor(rep(c("Pro","Qui"),each=3)),sizeFactors=Sizes, maxround=3)
GeneMat
data <- as.numeric(data)
data <- as.matrix(data)
data
EBOut=EBTest(Data=data[,1:6],Conditions=as.factor(rep(c("Pro","Qui"),each=3)),sizeFactors=Sizes, maxround=3)
Sizes=MedianNorm(data)
EBOut=EBTest(Data=data[,1:6],Conditions=as.factor(rep(c("Pro","Qui"),each=3)),sizeFactors=Sizes, maxround=3)
Sizes=MedianNorm(data[,1:6])
EBOut=EBTest(Data=data[,1:6],Conditions=as.factor(rep(c("Pro","Qui"),each=3)),sizeFactors=Sizes, maxround=3)
EBDERes=GetDEResults(EBOut, FDR=0.05)
str(EBDERes$DEfound)
Sizes=MedianNorm(data)
EBOut=EBTest(Data=data,Conditions=as.factor(rep(c("Pro","Qui"),each=3)),sizeFactors=Sizes, maxround=3)
Sizes=MedianNorm(data[,1:6])
EBOut=EBTest(Data=data[,1:6],Conditions=as.factor(rep(c("Pro","Qui"),each=3)),sizeFactors=Sizes, maxround=3)
EBOut
EBDERes=GetDEResults(EBOut, FDR=0.05)
str(EBDERes$DEfound)
head(EBDERes$PPMat)
str(EBDERes$Status)
View(EBDERes)
EBDERes[["PPMat"]]
GeneFC=PostFC(EBOut)
str(GeneFC)
View(GeneFC)
PlotPostVsRawFC(EBOut,GeneFC)
setwd("~/Desktop/Automator/Boxplot_batch")
setwd("~/Desktop/test")
mat <- matrix(c(1,4,2,4,3,4), 2, 4, byrow = TRUE)
mat <- matrix(c(1,4,2,4,3,4), 3, 3, byrow = TRUE)
mat
mat <- matrix(c(1,4,2,4,3,4), 2, 4)
mat <- matrix(c(1,4,2,4,3,4), 4, 2)
mat <- matrix(c(1,4,2,4,3,4), ncol = 2,nrow =  4)
library(grid)
library(ggplotify)
library(genefilter)
library(ComplexHeatmap)
library(ggplot2)
library(maptools)
library(ggrepel)
library(ggdendro)
library(cowplot)
data <- read.csv("Count_matrix/PQS_ALL.csv", header = T, row.names = 1)
pca <- prcomp(data, scale. = T)
label<- colnames(data)
label<- gsub("\\_.+$", "", label)
lab_x <- paste(summary(pca)$importance[3,1],
"% of variance)", sep = "")
lab_x <- paste("PC1 (", lab_x, sep = "")
lab_y <- paste(summary(pca)$importance[3,2],
"% of variance)", sep = "")
lab_y <- paste("PC2 (", lab_y, sep = "")
pca$rotation <- as.data.frame(pca$rotation)
g1 <- ggplot(pca$rotation,
aes(x=pca$rotation[,1],
y=pca$rotation[,2],
col=label, label = label)) +
geom_point()+
theme(panel.background =element_rect(fill=NA,color=NA),
panel.border = element_rect(fill = NA, size=0.5)) +
xlab(lab_x) + ylab(lab_y) + geom_text_repel() +
theme(legend.position="none")
rho <- cor(data,method="spearman")
d <- dist(1-rho)
mds <- as.data.frame(cmdscale(d))
label<-colnames(data)
label<-gsub("\\_.+$", "", label)
g2 <- ggplot(mds, aes(x = mds[,1], y = mds[,2],
col = label, label = label)) +
geom_point()+
theme(panel.background =element_rect(fill=NA,color=NA),
panel.border = element_rect(fill = NA, size=0.5)) +
xlab("Leading LogFC (dim 1)") + ylab("Leading LogFC (dim 2)") +
geom_text_repel() + theme(legend.position="none")
data.t <- t(data)
hc <- hclust(dist(data.t), "ward.D2")
dendr <- dendro_data(hc, type="rectangle")
g3 <- ggplot() +
geom_segment(data=segment(dendr),
aes(x=x, y=y, xend=xend, yend=yend)) +
geom_text(data=label(dendr),
aes(x, y, label=label, hjust=0), size=3) +
coord_flip()+ scale_y_reverse(expand=c(0.2, 0)) +
theme(axis.line.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_blank(),
axis.title.y=element_blank(),
panel.background=element_rect(fill="white"),
panel.grid=element_blank())
data.z <- genescale(data, axis=1, method="Z")
data.z <- na.omit(data.z)
ht <- as.grob(Heatmap(data.z, name = "z-score",
column_order = sort(colnames(data.z[1:9])),
clustering_method_columns = 'ward.D2',
show_row_names = F, show_row_dend = F))
gridExtra::grid.arrange(g3, g1, g2,ht, nrow = 2)
layout1 <- rbind(c(1, 1, 1),
c(2, 3, 4),)
layout1 <- rbind(c(1, 4),
c(2, 4),
c(3, 4))
gridExtra::grid.arrange(g3, g1, g2,ht, layout_matrix = layout1)
pdf("a.pdf",width = 7,height = 9)
gridExtra::grid.arrange(g3, g1, g2,ht, layout_matrix = layout)
dev.off()
layout <- rbind(c(1, 4),
c(2, 4),
c(3, 4))
pdf("a.pdf",width = 7,height = 9)
gridExtra::grid.arrange(g3, g1, g2, ht, layout_matrix = layout)
dev.off()
library(patchwork)
g1 + g2 + g3
g1 + g2 + g3 + lot_layout(ncol = 1)
g1 + g2 + g3 + plot_layout(ncol = 1)
g1 + g2 + g3 + plot_layout(ncol = 1) - ht
g1 + g2 + g3 + plot_layout(ncol = 1) - plot_spacer()- ht
pdf("a.pdf",width = 7,height = 9)
g3 + g1 + g2 + plot_layout(ncol = 1) - ht
dev.off()
g1 + g2 + g3 + plot_layout(ncol = 1) - { plot_spacer() + ht}
g1 + g2 + g3 + plot_layout(ncol = 1) - { plot_spacer() + ht + plot_layout(ncol = 1)}
ht <- as.grob(Heatmap(data.z, name = "z-score",
column_order = sort(colnames(data.z[1:9])),
clustering_method_columns = 'ward.D2',
show_row_names = F, show_row_dend = F),
column_names_side = "top")
ht <- as.grob(Heatmap(data.z, name = "z-score",
column_order = sort(colnames(data.z[1:9])),
clustering_method_columns = 'ward.D2',
show_row_names = F, show_row_dend = F,
column_names_side = "top")
layout <- rbind(c(1, 4),
c(2, 4),
c(3, 4))
pdf("a.pdf",width = 7,height = 9)
g3 + g1 + g2 + plot_layout(ncol = 1) - ht
dev.off()
pca_name <- gsub("\\..+$", "", Count_matrix)
pca_name <- paste(pca_name, "_pca.pdf", sep = "")
mds_name <- gsub("\\..+$", "", Count_matrix)
mds_name <- paste(mds_name, "_mds.pdf", sep = "")
pdf(pca_name, height = 3, width = 3.5)
print(g1)
dev.off()
pdf(mds_name, height = 3, width = 3.5)
print(g2)
dev.off()
pdf("dendrogram_wardD2.pdf",height = 3,width = 3)
print(g3)
dev.off()
}
ht <- as.grob(Heatmap(data.z, name = "z-score",
column_order = sort(colnames(data.z[1:9])),
clustering_method_columns = 'ward.D2',
show_row_names = F, show_row_dend = F, column_names_side = "top"))
g3 + g1 + g2 + plot_layout(ncol = 1) - ht
pdf("overview.pdf",width = 7,height = 9)
g3 + g1 + g2 + plot_layout(ncol = 1) - ht
dev.off()
devtools::load_all()
devtools::check()
devtools::use_package("ComplexHeatmap")
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
library(clusterProfiler)
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::use_testthat()
install.packages(testthat)
usethis::use_testthat()
use_test()
usethis::use_pkgdown()
library(KEPackage)
Omics_overview(Count_matrix = "/Users/kanetoh/Desktop/DEG_TPM_count.csv")
Omics_overview(Count_matrix = "/Users/kanetoh/Desktop/DEG_TPM_count.csv")
Omics_overview(Count_matrix = "/Users/kanetoh/Desktop/RNAseq_TPM_siACLY.txt")
pairwiseEBseq_viewer(Count_matrix = "/Users/kanetoh/Desktop/デモデータ/acly/GeneMat_TPM.txt",EBseq_Result = "/Users/kanetoh/Desktop/デモデータ/acly/GeneMat_result_new.txt", Species = "human")
devtools::document()
library(KEPackage)
pairwiseEBseq_viewer(Count_matrix = "/Users/kanetoh/Desktop/デモデータ/acly/GeneMat_TPM.txt",EBseq_Result = "/Users/kanetoh/Desktop/デモデータ/acly/GeneMat_result_new.txt", Species = "human")
devtools::document()
library(KEPackage)
pairwiseEBseq_viewer(Count_matrix = "/Users/kanetoh/Desktop/デモデータ/acly/GeneMat_TPM.txt",EBseq_Result = "/Users/kanetoh/Desktop/デモデータ/acly/GeneMat_result_new.txt", Species = "human")
devtools::document()
library(KEPackage)
pairwiseEBseq_viewer(Count_matrix = "/Users/kanetoh/Desktop/デモデータ/acly/GeneMat_TPM.txt",EBseq_Result = "/Users/kanetoh/Desktop/デモデータ/acly/GeneMat_result_new.txt", Species = "human")
devtools::document()
library(KEPackage)
pairwiseEBseq_viewer(Count_matrix = "/Users/kanetoh/Desktop/デモデータ/acly/GeneMat_TPM.txt",EBseq_Result = "/Users/kanetoh/Desktop/デモデータ/acly/GeneMat_result_new.txt", Species = "human")
library(enrichplot)
devtools::document()
library(enrichplot)
pairwiseEBseq_viewer(Count_matrix = "/Users/kanetoh/Desktop/デモデータ/acly/GeneMat_TPM.txt",EBseq_Result = "/Users/kanetoh/Desktop/デモデータ/acly/GeneMat_result_new.txt", Species = "human")
library(testthat)
test_check("KEPackage")
test_check(KEPackage)
library(KEPackage)
test_check(KEPackage)
test_check("KEPackage")
rlang::last_error()
devtools::document()
library(KEPackage)
pairwiseEBseq_viewer(Count_matrix = "/Users/kanetoh/Desktop/デモデータ/acly/GeneMat_TPM.txt",EBseq_Result = "/Users/kanetoh/Desktop/デモデータ/acly/GeneMat_result_new.txt", Species = "human")
devtools::document()
library(KEPackage)
pairwiseEBseq_viewer(Count_matrix = "/Users/kanetoh/Desktop/デモデータ/acly/GeneMat_TPM.txt",EBseq_Result = "/Users/kanetoh/Desktop/デモデータ/acly/GeneMat_result_new.txt", Species = "human")
library(KEPackage)
devtools::document()
library(KEPackage)
pairwiseEBseq_viewer(Count_matrix = "/Users/kanetoh/Desktop/デモデータ/acly/GeneMat_TPM.txt",EBseq_Result = "/Users/kanetoh/Desktop/デモデータ/acly/GeneMat_result_new.txt", Species = "human")
devtools::document()
library(KEPackage)
pairwiseEBseq_viewer(Count_matrix = "/Users/kanetoh/Desktop/デモデータ/acly/GeneMat_TPM.txt",EBseq_Result = "/Users/kanetoh/Desktop/デモデータ/acly/GeneMat_result_new.txt", Species = "human")
setReadable
devtools::document()
devtools::check()
library(KEPackage)
pairwiseEBseq_viewer(Count_matrix = "/Users/kanetoh/Desktop/デモデータ/acly/GeneMat_TPM.txt",EBseq_Result = "/Users/kanetoh/Desktop/デモデータ/acly/GeneMat_result_new.txt", Species = "human")
sessionInfo()
devtools::document()
library(KEPackage)
pairwiseEBseq_viewer(Count_matrix = "/Users/kanetoh/Desktop/デモデータ/acly/GeneMat_TPM.txt",EBseq_Result = "/Users/kanetoh/Desktop/デモデータ/acly/GeneMat_result_new.txt", Species = "human")
usethis::use_github_action_check_full()
devtools::document()
devtools::check()
usethis::use_github_action_check_full()
sessionInfo()
library(rstatix)
sessionInfo()
library(readr)
sessionInfo()
devtools::document()
devtools::check()
devtools::document()
require(devtools)
install_github("Kan-E/KEPackage")
